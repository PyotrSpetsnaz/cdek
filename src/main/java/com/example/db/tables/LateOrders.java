/*
 * This file is generated by jOOQ.
 */
package com.example.db.tables;


import com.example.db.Indexes;
import com.example.db.Keys;
import com.example.db.Public;
import com.example.db.tables.records.LateOrdersRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LateOrders extends TableImpl<LateOrdersRecord> {

    private static final long serialVersionUID = 149302521;

    /**
     * The reference instance of <code>public.late_orders</code>
     */
    public static final LateOrders LATE_ORDERS = new LateOrders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LateOrdersRecord> getRecordType() {
        return LateOrdersRecord.class;
    }

    /**
     * The column <code>public.late_orders.id</code>.
     */
    public final TableField<LateOrdersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.late_orders.time</code>.
     */
    public final TableField<LateOrdersRecord, Timestamp> TIME = createField("time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>public.late_orders</code> table reference
     */
    public LateOrders() {
        this(DSL.name("late_orders"), null);
    }

    /**
     * Create an aliased <code>public.late_orders</code> table reference
     */
    public LateOrders(String alias) {
        this(DSL.name(alias), LATE_ORDERS);
    }

    /**
     * Create an aliased <code>public.late_orders</code> table reference
     */
    public LateOrders(Name alias) {
        this(alias, LATE_ORDERS);
    }

    private LateOrders(Name alias, Table<LateOrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private LateOrders(Name alias, Table<LateOrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> LateOrders(Table<O> child, ForeignKey<O, LateOrdersRecord> key) {
        super(child, key, LATE_ORDERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LATE_ORDERS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LateOrdersRecord> getPrimaryKey() {
        return Keys.LATE_ORDERS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LateOrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<LateOrdersRecord>>asList(Keys.LATE_ORDERS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LateOrders as(String alias) {
        return new LateOrders(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LateOrders as(Name alias) {
        return new LateOrders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LateOrders rename(String name) {
        return new LateOrders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LateOrders rename(Name name) {
        return new LateOrders(name, null);
    }
}
